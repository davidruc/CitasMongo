use("db_citas");
db.createCollection("counters");
db.counters.insertMany([
    { count: "tipo_documentoId", sequence_value: 0 },
    { count: "generoId", sequence_value: 0 },
    { count: "acudienteId", sequence_value: 0 },
    { count: "usuarioId", sequence_value: 0 },
    { count: "citaId", sequence_value: 0 },
    { count: "estado_citaId", sequence_value: 0 },
    { count: "medicoId", sequence_value: 0 },
    { count: "especialidadId", sequence_value: 0 },
    { count: "consultorioId", sequence_value: 0 },
    { count: "sessionId", sequence_value: 0},
    { count: "rolId", sequence_value: 0},
]);
db.createCollection("tipo_documento", {
    capped: true,
    size: 500,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["tipodoc_id", "tidodoc_nombre", "tipodoc_abreviatura"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                tipodoc_id: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20
                },
                tidodoc_nombre: {
                    bsonType: "string"
                },
                tipodoc_abreviatura: {
                    bsonType: "string"
                }
            }  
        }
    }
});
db.createCollection("genero",{
    capped: true,
    max: 7,
    size: 1000,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["gen_id", "gen_nombre", "gen_abreviatura"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                gen_id: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20
                },
                gen_nombre: {
                    bsonType: "string"
                },
                gen_abreviatura: {
                    bsonType: "string"
                }
            }  
        }
    }
});
db.createCollection("acudiente",{
    capped: true,
    max: 100,
    size: 16000,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["acu_codigo", "acu_nombreCompleto", "acu_telefono", "acu_direccion"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                acu_codigo: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 200
                },
                acu_nombreCompleto: {
                    bsonType: "string"
                },
                acu_telefono: {
                    bsonType: "number"
                },
                acu_direccion: {
                    bsonType: "string"
                }
            }  
        }
    }
});
db.createCollection("usuario",{
    capped: true,
    max: 5,
    size: 1000,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["usu_id", "usu_nombre", "usu_segdo_nombre", "usu_primer_apellido_usuar", "usu_segdo_apellido_usuar","usu_telefono", "usu_direccion", "usu_email", "usu_tipodoc", "usu_genero", "usu_edad"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                usu_id: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20
                },
                usu_nombre: {
                    bsonType: "string"
                },
                usu_segdo_nombre: {
                    bsonType: "string"
                },
                usu_primer_apellido_usuar: {
                    bsonType: "string"
                },
                usu_segdo_apellido_usuar: {
                    bsonType: "string"
                },
                usu_telefono: {
                    bsonType: "string"
                },
                usu_direccion: {
                    bsonType: "string"
                },
                usu_email: {
                    bsonType: "string"
                },
                usu_tipodoc: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20
                },
                usu_genero: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20
                },
                usu_acudiente: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 1000
                },
                usu_edad:{
                    bsonType: "int",
                    minimum: 0,
                    maximum: 130
                }
            }  
        }
    }
});
db.createCollection("cita",{
    capped: true,
    max: 1000,
    size: 50000,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["cit_codigo", "cit_fecha", "cit_estadoCita", "cit_medico", "cit_datosUsuario"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                cit_codigo: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 1000
                },
                cit_fecha: {
                    bsonType: "string"
                },
                cit_estadoCita: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 1000
                },
                cit_medico: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 1000
                },
                cit_datosUsuario: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 1000
                }
            }  
        }
    }
});
db.createCollection("estado_cita",{
    capped: true,
    max: 5,
    size: 1000,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["estcita_id", "estcita_nombre"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                estcita_id: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20
                },
                estcita_nombre: {
                    bsonType: "string"
                }
            }  
        }
    }
});
db.createCollection("medico",{
    capped: true,
    max: 80,
    size: 10000,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["med_nroMatriculaProfesional", "med_nombreCompleto", "med_consultorio", "med_especialidad"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                med_nroMatriculaProfesional: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 1000
                },
                med_nombreCompleto: {
                    bsonType: "string"
                },
                med_consultorio: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 1000
                },
                med_especialidad: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 1000
                },
            }  
        }
    }
});
db.createCollection("especialidad",{
    capped: true,
    max: 30,
    size: 8000,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["esp_id", "esp_nombre"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                esp_id: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20
                },
                esp_nombre: {
                    bsonType: "string"
                }
            }  
        }
    }
});
db.createCollection("consultorio",{
    capped: true,
    max: 100,
    size: 30000,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["cons_codigo", "cons_nombre"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                cons_codigo: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20
                },
                cons_nombre: {
                    bsonType: "string"
                }
            }  
        }
    }
});
db.createCollection("session", {
    validator: {
        $jsonSchema:{
            bsonType: "object", 
            additionalProperties: false,
            required: ["user_name", "clave", "methods" ,"rol"],
            properties:{
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int"
                },
                user_name: {
                    bsonType: "string"
                },
                clave: {
                    bsonType: "string"
                },
                methods: {
                    bsonType: "array",
                    items: {
                        bsonType: "string",
                    }
                },
                rol: { 
                    bsonType: 'array',
                    description: "El rol es obligatorio",
                    items: {
                        bsonType: "int",
                    }
                },
                permisos: { 
                    bsonType: 'object',
                    description: "Ingrese los permisos",
                    properties: {
                        "/api": {
                            bsonType: "array",
                            items: {
                                bsonType: "string",
                                description: "Ingrese la version autorizada",
                            }
                        }
                    }
                }
            }
        }
    }
});
db.createCollection("rol",{
    validator: {
        $jsonSchema: {
          bsonType: 'object',
          additionalProperties: false,
          required: ['id', 'nombre',],
          properties: {
            _id:{
                bsonType: 'objectId',
            },
            id:{
                bsonType: "int",
                description: "La cedula es obligatorio y tiene que se de tipo numerico"
            },
            nombre: { 
                bsonType: 'string',
                description: '{"status": "402", "message": "El nombre_usuario es obligatorio y solo recibe letras"}',
                pattern: "^[a-zA-Z ]+$"
            }
          },
        }
    }
});
use("db_citas");
db.especialidad.aggregate([{$match: {esp_nombre: "Cardiología"}}]);

/* Encontrar todos los pacientes que tienen citas con un médico específico (por ejemplo, el médico con **med_nroMatriculaProsional 1**) */
use("db_citas");
db.medico.aggregate([
    {
        $match: {
            "med_nroMatriculaProfesional" :123
        }
    },
    {
        $lookup: {
          from: "cita",
          localField: "med_nroMatriculaProfesional",
          foreignField: "cit_medico",
          as: "dataCita"
        }
    },
    {
        $lookup: {
          from: "usuario",
          localField: "dataCita.cit_datosUsuario",
          foreignField: "usu_id",
          pipeline: [
            {
                $lookup: {
                  from: "cita",
                  localField: "usu_id",
                  foreignField: "cit_datosUsuario",
                  pipeline: [
                    {
                        $project: {
                          _id: 0,
                          codigo: "$cit_codigo",
                          fecha: "$cit_fecha",
                        }
                    }
                  ],
                  as: "cita"
                }
            },
            {$unwind: "$cita"},
            {
                $project: {
                  _id: 0,
                  id_usuario: "$usu_id",
                  nombre: "$usu_nombre",
                  apellido: "$usu_primer_apellido_usuar",
                  telefono: "$usu_telefono",
                  cita : "$cita"
                }
            }
          ],
          as: "usuarios"
        }
    },
    {
        $project: {
            _id: 0,
            "Matricula_Profesional": "$med_nroMatriculaProfesional",
            "nombre_Medico": "$med_nombreCompleto",
            "pacientes": "$usuarios"
        }
    }
]);

/* Obtener las consultorías para un paciente específico (por ejemplo, paciente **con usu_id 1**) */
use("db_citas");
db.usuario.aggregate([
    {
        $match: {
            usu_id: 11
        }
    },
    {
        $lookup: {
          from: "cita",
          localField: "usu_id",
          foreignField: "cit_datosUsuario",
          pipeline:[{
            $project: {
              _id: 0,
              "codigo_cita": "$cit_codigo",
              "fecha": "$cit_fecha",
              "id_medico": "$cit_medico",
              "estado": "cit_estadoCita" 
            }
          }],
          as: "citaData"
        }
    },
    {
        $project: {
            _id: 0,
            id_usuario: "$usu_id",
            nombre: "$usu_nombre",
            apellido: "$usu_primer_apellido_usuar",
            telefono: "$usu_telefono",
            consultorías : "$citaData"
        }
    }
])

/* Encontrar todas las citas para un día específico (por ejemplo, '2023-07-12') */
use("db_citas");
db.cita.aggregate([
    {
        $match: {
            cit_fecha : "2023-07-13"
        }
    },{
        $project: {
          _id:0,
          "codigo_cita":"$cit_codigo",
          "fecha":"$cit_fecha",
          "matricula_medico":"$cit_medico"
        }
    }
])

/* Obtener los médicos y sus consultorios */

use("db_citas");
db.medico.aggregate([
    {
        $lookup: {
          from: "consultorio",
          localField: "med_consultorio",
          foreignField: "cons_codigo",
          pipeline:[
            {
                $project: {
                  _id: 0,
                  "codigo": "$cons_codigo",
                  "consultorio": "$cons_nombre"
                }
            }
          ],
          as: "consultorio"
        }
    },
    {
        $project: {
          _id: 0,
          "maticula": "$med_nroMatriculaProfesional",
          "nombre": "$med_nombreCompleto",
          "consultorio": "$consultorio"
        }
    }
]);

/* Contar el número de citas que un médico tiene en un día específico (por ejemplo, el médico con med_nroMatriculaProsional 1 en '2023-07-12') */

use("db_citas");
db.medico.aggregate([
    {
        $match: {
          "med_nroMatriculaProfesional": 123
        }
    },
    {
        $lookup: {
          from: "cita",
          localField: "med_nroMatriculaProfesional",
          foreignField: "cit_medico",
          pipeline: [
            {
                $match: {
                  "cit_fecha": "2023-07-15"
                }
            }
          ],
          as: "citas"
        }
    },
    {
        $project: {
          _id: 0,
          "matricula_medica": "$med_nroMatriculaProfesional",
          "nombre_medico": "$med_nombreCompleto",
          "fecha": {$arrayElemAt: ["$citas.cit_fecha", 0]},
          "numero_citas": {$size: "$citas"}
        }
    }
]);

/* Obtener los consultorio donde se aplicó las citas de un paciente */

use("db_citas");
db.usuario.aggregate([
    {
        $lookup: {
          from: "cita",
          localField: "usu_id",
          foreignField: "cit_datosUsuario",
          pipeline: [
            {
                $lookup: {
                  from: "medico",
                  localField: "cit_medico",
                  foreignField: "med_nroMatriculaProfesional",
                  pipeline: [
                    {
                        $lookup: {
                          from: "consultorio",
                          localField: "med_consultorio",
                          foreignField: "cons_codigo",
                          as: "consul"
                        }
                    }
                  ],
                  as: "medico"
                }
            },
            {
                $project: {
                  _id: 0,
                  "codigo_cita": "$cit_codigo",
                  "fecha": "$cit_fecha",
                  "codigo_medico": "$cit_medico",
                  "nombre_medico":  { $arrayElemAt: ["$medico.med_nombreCompleto", 0] },
                  "consultorio": { $arrayElemAt: ["$medico.consul.cons_nombre", 0]}
                }
            },
            {$unwind: "$consultorio"}
          ],
          as: "citas"
        }
    },
    {
        $match: {
          "citas": { $ne: [] }
        }
    },
    {
        $project: {
          _id: 0,
          "id_usuario": "$usu_id",
          "nombre": "$usu_nombre",
          "apellido": "$usu_primer_apellido_usuar",
          "telefono": "$usu_telefono",
          "direccion": "$usu_direccion",
          "email": "$usu_email",
          "citas_programadas": "$citas"
        }
    }
]);

/* Obtener todas las citas realizadas por los pacientes de un genero si su estado de la cita fue atendidad */

use("db_citas");
db.cita.aggregate([
    {
        $match: {
          "cit_estadoCita": 4
        }
    },
    {
        $lookup: {
          from: "usuario",
          localField: "cit_datosUsuario",
          foreignField: "usu_id",
          pipeline: [{
            $lookup: {
              from: "genero",
              localField: "usu_genero",
              foreignField: "gen_id",
              as: "gender"
            }
          },
          {
            $project: {
              _id: 0,
              "nombre_paciente": "$usu_nombre",
              "apellido_paciente": "$usu_primer_apellido_usuar",
              "telefono": "$usu_telefono",
              "direccion": "$usu_direccion",
              "email": "$usu_email",
              "genero": { $arrayElemAt: ["$gender.gen_nombre",0]},
              "abreviatura": { $arrayElemAt: ["$gender.gen_abreviatura",0]},
            
            }
          }
        ],
          as: "usu"
        }
    },
    {
        $match: {
            "usu.abreviatura": "M"
        }
    },
    {
        $project: {
          _id: 0,
          "codigo_cita": "$cit_codigo",
          "fecha": "$cit_fecha",
          "codigo_medico": "$cit_medico",
          "paciente": "$usu",
        }
    }
])

/* Insertar un paciente a la tabla usuario pero si es menor de edad solicitar primero que ingrese el acudiente y validar si ya estaba registrado el acudiente. */

/* hago el post, pero antes de enviar los datos reviso en el req.body que usu_edad sea >= 18, si no retorna de una respuesta que dice que ingrese un acudiente. Deja ingresar ingresar un objeto con los parámetros de acudiente verificando si envía la estructura de acudiente, si es así hace el post a acudiente, y después hace un find en acudientes mirando si ese acu_nombreCompleto no existe, luego si es true le manda un mensaje de que pudo ingresar y que envíe el usuario. si existe, manda de una el mensaje.  */

/* Mostrar todas las citas que fueron rechazadas y en un mes específico, mostrar la fecha de la cita, el nombre del usuario y el médico. */

use("db_citas");
db.cita.aggregate([
    { $match: {
        cit_estadoCita : 3
    }},
    {
          $match: {
            "cit_fecha":{
                $gte: "2023-07-11",
                $lte: "2023-07-16"
              }
          }
    },
    {
        $lookup: {
          from: "medico",
          localField: "cit_medico",
          foreignField: "med_nroMatriculaProfesional",
          pipeline: [
            {
                $project: {
                  _id: 0,
                  "matricula_medica": "$med_nroMatriculaProfesional",
                  "nombre_medico": "$med_nombreCompleto",
                }
            }
          ],
          as: "medico_Asignado"
        }
    },
    {
        $lookup: {
          from: "usuario",
          localField: "cit_datosUsuario",
          foreignField: "usu_id",
          pipeline: [
            {
                $project: {
                  _id: 0,
                  "id_usuario": "$usu_id",
                  "nombre": "$usu_nombre",
                  "primer_apellido": "$usu_primer_apellido_usuar",
                  "segundo_apellido": "$usu_segdo_apellido_usuar",
                  "telefono_contacto": "$usu_telefono",
                  "direccion": "$usu_direccion",
                  "email": "$usu_email",
                }
            }
          ],
          as: "paciente"
        }
    },
    {$unwind: "$medico_Asignado"},
    {$unwind: "$paciente"},
    {
        $project: {
          _id: 0,
          "codigo_cita": "$cit_codigo",
          "fecha": "$cit_fecha",
          "estado_cita": "$cit_estadoCita",
          "medico": "$medico_Asignado",
          "paciente": "$paciente"
        }
    }
])
